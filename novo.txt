MENU
<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>TFinance - Menu</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        background-color: #419fd9;
        font-family: Arial, sans-serif;
      }
      .container-menu {
        max-width: 1200px;
        background-color: white;
        margin: 80px auto;
        padding: 40px 50px;
        border-radius: 10px;
      }
      .top-bar,
      .saldo-box,
      .lancamentos-box,
      .graficos-box {
        margin-bottom: 50px;
      }
      .user-circle {
        width: 45px;
        height: 45px;
        background-color: #f28b82;
        color: white;
        border-radius: 50%;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        margin-right: 10px;
      }
      .grafico-barra {
        height: 20px;
        background-color: #198754;
        border-radius: 4px;
      }
      .graficos-box .box {
        background-color: #f0f0f0;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        font-size: 1.1rem;
      }
    </style>
  </head>
  <body>
    <!-- Logo topo -->
    <img
      src="/images/logo.png"
      alt="Logo TFinance"
      style="display: block; margin: 10px auto; width: 150px"
    />

    <div class="container-menu">
      <!-- Top Bar -->
      <div class="row mb-4" id="topBar"></div>
      <!-- Saldo Geral -->
      <div
        class="saldo-box bg-light p-3 rounded d-flex justify-content-between align-items-center"
        id="saldoBox"
      ></div>
      <!-- Últimos Lançamentos -->
      <div
        class="lancamentos-box bg-light p-3 rounded"
        id="lancamentosBox"
      ></div>
      <!-- Gráficos -->
      <div class="graficos-box row" id="graficosBox"></div>
    </div>

    <!-- Logo rodapé -->
    <img
      src="/images/logo.png"
      alt="Logo TFinance"
      style="display: block; margin: 15px auto; width: 150px"
    />

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script type="module">
      //import { apiRequest } from "/public/js/apiClient.js";


       window.verLancamentos = async function() {
        const token = localStorage.getItem("authToken");

        const res = await fetch("/v1/lancamentos", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
          },
        });

      }

      window.addEventListener("load", async () => {
        const token = localStorage.getItem("authToken");

        if (!token) {
          alert("Token não encontrado. Faça login.");
          window.location.href = "/v1/login";
          return;
        }

        try {
          const res = await fetch("/v1/menu-data", {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
              Authorization: "Bearer " + token,
            },
          });
          if (!res.ok) throw new Error("Erro: " + res.status);
          const data = await res.json();

          // Atualiza a Top Bar
          document.getElementById("topBar").innerHTML = `
          <div class="col-md-6 d-flex align-items-center bg-light rounded p-2">
            <div class="user-circle">${data.user.nome
              .charAt(0)
              .toUpperCase()}</div>
            <div>
              <small>Seja Bem-vindo</small><br>
              <strong>${data.user.nome}</strong>
            </div>
          </div>
          <div class="col-md-6 text-end">
            <a href="/v1/lancamentos"  class="btn btn-secondary">Realizar Lançamento</a>
          </div>
        `;

          // Atualiza o Saldo Geral
          document.getElementById("saldoBox").innerHTML = `
          <span><strong>Saldo geral:</strong></span>
          <span style="font-size: 1.8rem;">R$ ${parseFloat(
            data.numericData.saldoGeral || 0
          ).toFixed(2)}</span>
        `;

          // Atualiza os Últimos Lançamentos
          let lancamentosHTML =
            '<strong>Últimos Lançamentos</strong><div class="mt-2">';
          data.lancamentos.slice(0, 2).forEach((l) => {
            const tipo = l.tipo === "Receita" ? "Receita" : l.tipo === "Despesa" ? "Despesa" : "Não informado";
            const cor = l.tipo === "Receita" ? "success" : l.tipo === "Despesa" ? "danger" : "secondary";
            const sinal = l.tipo === "Receita" ? "+" : "-";
            
            lancamentosHTML += `
            <div class="d-flex justify-content-between mb-2">
              <div>
                <span class="badge bg-${cor}">${tipo}</span>
                ${l.categoria ? `<small class="text-muted ms-2">${l.categoria}</small>` : ""}
              </div>
            </div>
          `;
          });
          lancamentosHTML += "</div>";
          document.getElementById("lancamentosBox").innerHTML = lancamentosHTML;

          // Atualiza os Gráficos
          document.getElementById("graficosBox").innerHTML = `
          <div class="col-md-4">
            <div class="box">
              <strong>${data.pizzaData.percentualReceitas}%</strong>
              <div class="grafico-barra mt-2" style="width: ${
                data.pizzaData.percentualReceitas
              }%;"></div>
              <small>Receitas</small>
            </div>
          </div>
          <div class="col-md-4">
            <div class="box">
              <strong>${data.pizzaData.percentualDespesas}%</strong>
              <div class="grafico-barra mt-2 bg-danger" style="width: ${
                data.pizzaData.percentualDespesas
              }%;"></div>
              <small>Despesas</small>
            </div>
          </div>
          <div class="col-md-4">
            <div class="box">
              <strong>Totais</strong><br>
              Receitas: R$ ${parseFloat(data.numericData.totalReceitas || 0).toFixed(
                2
              )}<br>
              Despesas: R$ ${parseFloat(data.numericData.totalDespesas || 0).toFixed(
                2
              )}
            </div>
          </div>
        `;
        } catch (err) {
          console.error("Erro ao carregar dados do menu:", err);
          alert("Erro ao carregar os dados. Faça login novamente.");
          window.location.href = "/v1/login";
        }
      });
    </script>
  </body>
</html>

LANCAMENTOS
<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8">
  <title>Realizar Lançamento - <%= user.nome %>
  </title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #4A9EDA;
    }

    .form-container {
      background-color: white;
      border-radius: 10px;
      padding: 60px 80px;
      margin: 50px auto;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      height: auto;
      max-width: 1100px;
    }

    .form-container label {
      margin-bottom: 20px;
      margin-top: 10px;
      display: inline-block;
    }

    .categoria-btn {
      background-color: #d9e1ec;
      border: none;
      padding: 20px 50px;
      border-radius: 10px;
      cursor: pointer;
      transition: 0.2s;
    }

    .categoria-btn:hover {
      background-color: #c0cce0;
    }

    .categoria-selecionada {
      background-color: #a6bbd8;
    }

    .icon-img {
      width: 60px;
      height: 30px;
    }

    .footer-img,
    .header-img {
      display: block;
      margin: auto;
    }

    .btn-enviar {
      width: 250px;
      background-color: #b0c4de;
      color: white;
      border-radius: 8px;
      padding: 10px;
      border: none;
      margin-top: 10px;
    }

    .btn-enviar:hover {
      background-color: #90b0d0;
    }

    .btn-voltar {
      background-color: #6c757d;
      color: white;
      border-radius: 8px;
      padding: 8px 20px;
      text-decoration: none;
      display: inline-block;
    }

    .btn-voltar:hover {
      background-color: #5a6268;
    }

    .btn-check:checked + .btn-outline-primary,
    .btn-check:checked + .btn-outline-danger {
      background-color: #a6bbd8;
      color: white;
    }
  </style>
</head>

<body>
  <!-- Header -->
  <img src="/images/logo.png" alt="Logo TFinance" class="header-img mt-3">

  <div class="container form-container">
    <div class="mb-3 text-start">
      <a href="/v1/menu" class="btn-voltar">← Voltar ao Menu</a>
    </div>

    <h4 class="text-center">Realizar Lançamento</h4>

    <div id="errorMessage" class="alert alert-danger" style="display:none;"></div>
    <div id="successMessage" class="alert alert-success" style="display:none;"></div>

    <!-- Formulário -->
    <form id="lancamentoForm">
      <!-- Valor -->
      <div class="mb-3">
        <label>Valor</label>
        <input type="number" step="0.01" name="valor" placeholder="R$ 0,00" class="form-control" required>
      </div>

      <!-- Data -->
      <div class="mb-3">
        <label>Escolha uma Data</label>
        <input type="date" name="data" class="form-control" required>
      </div>

      <!-- Tipo de Lançamento -->
      <div class="mb-3">
        <label>Tipo de Lançamento</label>
        <div class="d-flex gap-3">
          <input type="radio" class="btn-check" name="tipo" id="tipo-receita" value="Receita" required>
          <label class="btn btn-outline-primary" for="tipo-receita">Receita</label>
          <input type="radio" class="btn-check" name="tipo" id="tipo-despesa" value="Despesa" required>
          <label class="btn btn-outline-danger" for="tipo-despesa">Despesa</label>
        </div>
      </div>

      <!-- Categorias -->
      <div class="mb-3">
        <label>Categorias</label>
        <div class="d-flex justify-content-between flex-wrap gap-2">
          <button type="button" class="categoria-btn" id="btn-Alimentacao" data-categoria onclick="selecionarCategoria('Alimentacao')">
            <img src="/icones/alimentacao.png" class="icon-img" alt="Alimentação"><br><small>Alimentação</small>
          </button>
          <button type="button" class="categoria-btn" id="btn-Investimento" data-categoria onclick="selecionarCategoria('Investimento')">
            <img src="/icones/investimento.png" class="icon-img" alt="Investimento"><br><small>Investimento</small>
          </button>
          <button type="button" class="categoria-btn" id="btn-Fatura" data-categoria onclick="selecionarCategoria('Fatura')">
            <img src="/icones/fatura.png" class="icon-img" alt="Fatura"><br><small>Fatura</small>
          </button>
          <button type="button" class="categoria-btn" id="btn-DespesaCategoria" data-categoria onclick="selecionarCategoria('Despesa')">
            <img src="/icones/despesa.png" class="icon-img" alt="Despesa Pessoal"><br><small>Despesa Pessoal</small>
          </button>
          <button type="button" class="categoria-btn" id="btn-Outros" data-categoria onclick="selecionarCategoria('Outros')">
            <img src="/icones/outros.png" class="icon-img" alt="Outros"><br><small>Outros</small>
          </button>
        </div>
        <!-- Campo oculto para categoria -->
        <input type="hidden" name="categoria" id="categoria">
      </div>

      <!-- Comentário -->
      <div class="mb-3">
        <label>Comentário</label>
        <input type="text" name="comentario" maxlength="140" placeholder="Máx. 140 caracteres" class="form-control">
      </div>

      <!-- Botão Enviar -->
      <div class="text-center">
        <button type="submit" class="btn-enviar">ENVIAR</button>
      </div>
    </form>
  </div>

  <!-- Footer -->
  <img src="/images/logo.png" alt="Logo TFinance" class="footer-img my-3">

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>

    function selecionarCategoria(cat) {
      document.getElementById('categoria').value = cat;
      let buttons = document.querySelectorAll('.categoria-btn[data-categoria]');
      buttons.forEach(btn => btn.classList.remove('categoria-selecionada'));
      document.getElementById('btn-' + cat).classList.add('categoria-selecionada');
    }

    // Intercepta a submissão do formulário para enviar via fetch com header Authorization
    const lancamentoForm = document.getElementById('lancamentoForm');
    const errorBox = document.getElementById('errorMessage');
    const successBox = document.getElementById('successMessage');

    lancamentoForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      // Recupera o token JWT do localStorage
      const token = localStorage.getItem('authToken');
      if (!token) {
        alert('Token não encontrado. Faça login novamente.');
        window.location.href = '/v1/login';
        return;
      }

      const formData = new FormData(lancamentoForm);
      const payload = {
        valor: formData.get('valor'),
        data: formData.get('data'),
        tipo: formData.get('tipo'),
        categoria: formData.get('categoria'),
        comentario: formData.get('comentario')
      };

      if (!formData.get('tipo')) {
        errorBox.style.display = 'block';
        errorBox.textContent = 'Selecione se é Receita ou Despesa.';
        successBox.style.display = 'none';
        return;
      };

      try {
        const res = await fetch('/v1/lancamentos', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + token
          },
          body: JSON.stringify(payload)
        });

        const result = await res.json();
        if (!res.ok) {
          errorBox.style.display = 'block';
          errorBox.textContent = result.error || 'Erro ao inserir lançamento.';
          successBox.style.display = 'none';
        } else {
          successBox.style.display = 'block';
          successBox.textContent = result.message || 'Lançamento realizado com sucesso.';
          errorBox.style.display = 'none';
          lancamentoForm.reset();
        }
      } catch (error) {
        console.error(error);
        alert('Erro de conexão. Tente novamente.');
      }
    });
  </script>
</body>

</html>

LOGIN
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>TFinance - Login</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">

  <!-- Bootstrap -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      background-color: #419FD9;
      font-family: Arial, sans-serif;
    }
    .form-container {
      background-color: #ffffff;
      padding: 40px 30px;
      border-radius: 12px;
      max-width: 500px;
      margin: 40px auto;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
    }
    .logo-img {
      display: block;
      margin: 30px auto 10px auto;
      width: 160px;
      height: auto;
    }
    .btn-custom {
      background-color: #198754;
      color: white;
    }
    .btn-custom:hover {
      background-color: #157347;
    }
    .form-title {
      text-align: center;
      margin-bottom: 25px;
      color: #333333;
      font-weight: bold;
      font-size: 1.4rem;
    }
    .link-cadastro {
      text-align: center;
      margin-top: 20px;
    }
    #errorMessage {
      display: none;
    }
  </style>
</head>
<body>

  <!-- Logo no topo -->
  <img src="/images/logo.png" alt="TFinance Logo" class="logo-img">

  <div class="form-container">
    <h4 class="form-title">Acesse sua conta</h4>

    <div id="errorMessage" class="alert alert-danger"></div>

    <form id="loginForm">
      <div class="mb-4">
        <label for="email" class="form-label">Seu email</label>
        <input type="email" class="form-control" name="email" id="email" placeholder="E-mail" required>
      </div>

      <div class="mb-4">
        <label for="senha" class="form-label">Sua senha</label>
        <input type="password" class="form-control" name="senha" id="senha" placeholder="Senha" required>
      </div>

      <button type="submit" class="btn btn-custom w-100">Entrar</button>
    </form>

    <div class="link-cadastro">
      <small>Não possui login? <a href="/v1/cadastro" class="text-decoration-none">Quero fazer cadastro</a>.</small>
    </div>
  </div>

  <!-- Logo no rodapé -->
  <img src="/images/logo.png" alt="TFinance Logo" class="logo-img">

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Script de login via fetch -->
  <script type="module">
    //import { apiRequest } from '/public/js/apiClient.js';

    const form = document.getElementById('loginForm');
    const errorBox = document.getElementById('errorMessage');

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const formData = new FormData(form);
      const payload = {
        email: formData.get('email'),
        senha: formData.get('senha')
      };

      try {
        const res = await fetch('/v1/login', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(payload)
        });

        const data = await res.json();

        if (!res.ok) {
          errorBox.style.display = 'block';
          errorBox.textContent = data.error || 'Erro desconhecido ao fazer login.';
          return;
        }

        // Armazena os tokens no localStorage
        localStorage.setItem('authToken', data.token);
        localStorage.setItem('refreshToken', data.refreshToken);

        // Redireciona o usuário para o menu
        window.location.href = '/v1/menu';
      } catch (err) {
        console.error('Erro no login:', err);
        errorBox.style.display = 'block';
        errorBox.textContent = 'Erro de conexão com o servidor.';
      }
    });
  </script>
</body>
</html>

CADASTRO
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <title>TFinance - Cadastro</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #419FD9;
      font-family: Arial, sans-serif;
    }
    .form-container {
      background-color: #ffffff;
      padding: 30px;
      border-radius: 10px;
      max-width: 400px;
      margin: 20px auto;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .logo-img {
      display: block;
      margin: 20px auto;
      width: 150px;
      height: auto;
    }
    .btn-custom {
      background-color: #198754;
      color: white;
    }
    .btn-custom:hover {
      background-color: #157347;
    }
    .form-title {
      text-align: center;
      margin-bottom: 20px;
      color: #333333;
      font-weight: bold;
    }
    .link-login {
      text-align: center;
      margin-top: 15px;
    }
  </style>
</head>
<body>
  <img src="/images/logo.png" alt="TFinance Logo" class="logo-img">
  <div class="form-container">
    <h4 class="form-title">Cadastro</h4>
    <% if (error) { %>
      <div class="alert alert-danger"><%= error %></div>
    <% } %>
    <form action="/v1/cadastro" method="POST">
      <div class="mb-3">
        <label for="nome" class="form-label">Como podemos te chamar?</label>
        <input type="text" name="nome" id="nome" class="form-control" required>
      </div>
      <div class="mb-3">
        <label for="email" class="form-label">Seu email</label>
        <input type="email" name="email" id="email" class="form-control" required>
      </div>
      <!--pattern="^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)[A-Za-z\\d]{3,60}$"-->
      <div class="mb-3">
        <label for="senha" class="form-label">Sua senha</label>
        <input type="password" name="senha" id="senha" class="form-control"
               
               title="A senha deve ter entre 3 e 60 caracteres, com ao menos uma letra maiúscula, uma minúscula e um número."
               required>
      </div>

      <div class="mb-3">
        <label for="confirmSenha" class="form-label">Repetir senha</label>
        <input type="password" name="confirmSenha" id="confirmSenha" class="form-control"
              
               required>
      </div>
      <button type="submit" class="btn btn-custom w-100">Cadastrar</button>
    </form>
    <div class="link-login">
      <small>Já possui cadastro? <a href="/v1/login">Quero fazer login</a>.</small>
    </div>
  </div>
  <img src="/images/logo.png" alt="TFinance Logo" class="logo-img">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

INDEX.JS
// index.js
const express = require('express');
const bodyParser = require('body-parser'); // Para parse de formulários e JSON

const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const authenticateToken = require('../middlewares/authenticateToken.js');
const cookieParser = require('cookie-parser');

const app = express();

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

// Middleware para permitir o uso de cookies
app.use(cookieParser());

app.use(express.static(path.join(__dirname, '..')));

// Configuração do banco de dados SQLite
//const db = new sqlite3.Database('../database/sqlite.db');

const { db, getPizzaChartData, getCartesianChartData, getNumericChartData } = require('../database/sqlite.js');
db.once("open", () => console.log("Conectado ao sqlite"));

// Chave secreta para JWT (idealmente armazenada em VARIÁVEIS DE AMBIENTE)
const JWT_SECRET = process.env.JWT_SECRET || 'SUA_CHAVE_SECRETA';

// Configuração do EJS
app.set('views', path.join('./views'));
app.set('view engine', 'ejs');

/* --------------------
   LOGIN USUÁRIO

   felipe
   felipe@gmail.com
   Admin123
----------------------- */



/* --------------------
   ROTAS DE AUTENTICAÇÃO
----------------------- */

// Tela principal - GET exibe a tela Home
app.get('/v1/home', (req, res) => {
  res.render('home', { user: null });
});

// Tela de cadastro - GET
app.get('/v1/cadastro', (req, res) => {
  res.render('cadastro', { error: null });
});

// Cadastro - POST
app.post('/v1/cadastro', async (req, res) => {
  const { nome, email, senha, confirmSenha } = req.body;

  // Validações básicas
  if (!nome || !email || !senha || !confirmSenha) {
    return res.render('cadastro', { error: 'Todos os campos são obrigatórios.' });
  }
  if (senha !== confirmSenha) {
    return res.render('cadastro', { error: 'Senhas não conferem.' });
  }
  if (senha.length < 3) {
    //mudar para um tamanho mínimo aceitável
    return res.render('cadastro', { error: 'A senha deve ter no mínimo 3 caracteres.' });
  }

  try {
    // Criptografa a senha
    const hashedPassword = await bcrypt.hash(senha, 10);

    // Insere o usuário usando parâmetros para evitar SQL Injection
    const sql = `INSERT INTO user (nome, email, senha) VALUES (?, ?, ?)`;
    db.run(sql, [nome, email, hashedPassword], function (err) {
      if (err) {
        console.error(err);
        return res.render('cadastro', { error: 'Falha no cadastro. Tente novamente.' });
      }
      // Redireciona para a tela de login após o cadastro
      res.redirect('/v1/login');
    });
  } catch (error) {
    console.error("Erro ao criptografar a senha:", error);
    res.render('cadastro', { error: 'Erro interno. Tente novamente.' });
  }
});

// Tela de login - GET: exibe a tela de login
app.get('/v1/login', (req, res) => {
  res.render('login', { error: null });
});

// Login - POST: processa os dados de login
app.post('/v1/login', async (req, res) => {
  const { email, senha } = req.body;

  if (!email || !senha) {
    return res.status(400).json({ error: "Todos os campos são obrigatórios." });
  }

  const sql = `SELECT * FROM user WHERE email = ? LIMIT 1`;
  db.get(sql, [email], async (err, user) => {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: "Erro no sistema. Tente novamente." });
    }

    if (!user) {
      return res.status(401).json({ error: "Usuário não cadastrado, faça login para entrar" });
    }

    const match = await bcrypt.compare(senha, user.senha);
    if (!match) {
      return res.status(401).json({ error: "Credenciais inválidas." });
    }

    // Gera um token JWT para autenticação; o token é enviado para o cliente salvo no localStorage (expira em 1h); 
    const token = jwt.sign({ id: user.id, email: user.email, nome: user.nome }, JWT_SECRET, { expiresIn: '1h' });

    //Gera o refresh token que expira em 7dias
    const refreshToken = jwt.sign({ id: user.id, email: user.email, nome: user.nome }, JWT_SECRET, { expiresIn: '7d' });

    // Envia o token como cookie HTTP-Only para evitar acesso via JavaScript
    res.cookie('token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production', // só em produção usar https
      sameSite: 'strict',
      maxAge: 1000 * 60 * 60, // 1 hora
    });

    // retorna o token em formato JSON; o armazenamento local é feito no frontend
    res.json({ token, refreshToken, message: "Login realizado com sucesso." });
  });
});

/* --------------------
   ROTAS PROTEGIDAS (Exigem token JWT válido)
----------------------- */

// Tela de lançamentos - GET: Exibe os lançamentos do usuário
// authenticateToken,
app.get('/v1/lancamentos', authenticateToken, (req, res) => {
  console.log("Get Lançamentos");

  res.render('lancamentos', { user: req.user });
});

//authenticateToken,
app.post('/v1/lancamentos', authenticateToken, (req, res) => {
  const userId = req.user.id;
  const { valor, data, categoria, comentario } = req.body;

  if (!valor || !data || !categoria) {
    return res.status(400).json({ error: 'Os campos valor, data e categoria são obrigatórios.' });
  }

  // Mapeia o valor enviado para os valores permitidos no banco de dados.
  let categoriaLancamento = '';
  let tipo_lancamento = 1; // assumindo (1) para despesas e 0 para receitas

  switch (categoria) {
    case 'Alimentacao':
      categoriaLancamento = 'Alimentação';
      tipo_lancamento = 1;
      break;
    case 'Investimento':
      categoriaLancamento = 'Investimentos';
      tipo_lancamento = 0;
      break;
    case 'Fatura':
      categoriaLancamento = 'Fatura';
      tipo_lancamento = 1;
      break;
    case 'Despesa':
      categoriaLancamento = 'Despesas Pessoais';
      tipo_lancamento = 1;
      break;
    case 'Outros':
      categoriaLancamento = 'Outros';
      tipo_lancamento = 0;
      break;
    default:
      categoriaLancamento = categoria;
  }

  // Query para inserir o lançamento
  const sql = `
    INSERT INTO lancamento (user_id, valor, data, descricao, categoria_lancamento, tipo_lancamento)
    VALUES (?, ?, ?, ?, ?, ?)
  `;
  const params = [userId, valor, data, comentario || null, categoriaLancamento, tipo_lancamento];

  db.run(sql, params, function (err) {
    if (err) {
      console.error(err);
      return res.status(500).json({ error: 'Erro ao inserir lançamento no banco de dados.' });
    }
    res.json({ message: 'Lançamento inserido com sucesso.' });
  });
});

//authenticateToken,
// Tela Menu - GET: renderiza o menu.ejs
app.get('/v1/menu', (req, res) => {
  res.render('menu');
});

//authenticateToken,
// menu-data - GET: carrega os dados de saldo, lançamento e gráficos
app.get('/v1/menu-data', authenticateToken, (req, res) => {
  const userId = req.user.id;
  const sql = `SELECT * FROM lancamento WHERE user_id = ? ORDER BY data DESC`;

  db.all(sql, [userId], (err, lancamentos) => {
    if (err) return res.status(500).json({ error: 'Erro no banco de dados' });

    // Em sequência, coleta os dados dos gráficos
    getPizzaChartData(userId, (err, pizzaData) => {
      if (err) return res.status(500).json({ error: 'Erro no gráfico de pizza' });

      getCartesianChartData(userId, (err, cartesianData) => {
        if (err) return res.status(500).json({ error: 'Erro no gráfico cartesiano' });

        getNumericChartData(userId, (err, numericData) => {
          if (err) return res.status(500).json({ error: 'Erro no gráfico numérico' });

          res.json({
            user: req.user,
            lancamentos,
            pizzaData,
            cartesianData,
            numericData
          });
        });
      });
    });
  });
});


// Logout - Simplesmente retorna mensagem (a remoção do token fica no frontend)
app.post('/v1/logout', (req, res) => {
  // Limpa o cookie do token
  res.clearCookie('token', {
    path: '/',
  });

  res.json({ message: 'Logout realizado com sucesso.' });
});

// Refresh - Recebe refreshToken no corpo da requisição e, se válido, gera novo token de acesso
app.post('/v1/refresh', (req, res) => {
  const { refreshToken } = req.body;

  if (!refreshToken) return res.status(401).json({ error: 'Refresh token não fornecido.' });

  jwt.verify(refreshToken, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Refresh token inválido.' });

    // Gera novo access token - expira em 1h
    const newToken = jwt.sign({ id: user.id, email: user.email, nome: user.nome }, JWT_SECRET, { expiresIn: '1h' });

    res.json({ token: newToken, message: 'Token atualizado com sucesso.' });
  });
});

// Inicia o servidor
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando em: http://localhost:${PORT}/v1/home`);
});

//Projeto Felipe Favarin
